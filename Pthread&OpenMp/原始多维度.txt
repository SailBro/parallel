/* K-均值算法 */
#include<iostream>
#include<fstream>
#include<math.h>
#include <xmmintrin.h> //SSE
#include <emmintrin.h> //SSE2
#include <pmmintrin.h> //SSE3
#include <tmmintrin.h> //SSSE3
#include <smmintrin.h> //SSE4.1
#include <nmmintrin.h> //SSSE4.2
#include <immintrin.h> //AVX、AVX2


#include<windows.h>
#pragma comment(lib, "winmm.lib")

using namespace std;
#define Number 10000 //模式样本的最大维数与个数

struct Node //定义了一个用于存放模式样本的数据结构
{
	float element[Number] = { 0 };//模式样本
	int kinds = 0; //模式样本所属类别，0为未分类状态
} X[Number];

int n; //模式样本的维数
int m; //模式样本的个数
int k; //用于K-means算法的k值
Node* Z;
int number; //用于记录迭代计算轮数
float* D; //用于存放迭代计算中距离的变量
int* N; //用于统计每个模式类中的模式样本数
int(*S)[1000]; //用于统计每个模式类中的模式样本
int condition; //算法结束的条件


float Distance(Node X, Node Z, int n) //欧式距离计算函数
{
	float result = 0;
	for (int i = 0; i < n; i++)
	{
		result = result + (X.element[i] - Z.element[i]) * (X.element[i] - Z.element[i]);
	}
	result = sqrt(result);
	return result;
}

void Add(Node& result, Node X, int n) //矩阵加法
{
	for (int i = 0; i < n; i++)
	{
		result.element[i] = result.element[i] + X.element[i];
	}
}

void Kmeans() //K-means算法中迭代计算函数
{
	number = 0; //用于记录迭代计算轮数
	D = new float[k]; //用于存放迭代计算中距离的变量
	N = new int[k](); //用于统计每个模式类中的模式样本数
	S = new int[k][1000]; //用于统计每个模式类中的模式样本
	condition = 1; //算法结束的条件

	while (1) //迭代运算
	{
		number++;
		condition = 1;
		for (int i = 0; i < k; i++) //对Ni进行初始化
		{
			N[i] = 0;
		}
		/* 分别计算各点与聚类中心的距离 */
		//对for循环进行向量化组合计算的优化处理

		// 声明一个包含4个单精度浮点数的向量变量，用0初始化
		for (int i = 0; i < m; i++)
		{
			//计算该点到k个聚类中心的距离
			for (int j = 0; j < k; j++)
			{
				D[j] = 0;//到该聚类中心的距离初始化为0
				for (int s = 0; s < n; s++) {
					//计算当前维度的距离
					float x = X[i].element[s];
					float z = Z[j].element[s];
					float res = (x - z) * (x - z);
					D[j] += res;
				}
			}
			//选距离最小作为聚类中心
			int temp = 0;
			for (int j = 0; j < k; j++)
			{
				if (D[temp] > D[j])
					temp = j;
				X[i].kinds = temp + 1;
			}
		}

		/* 统计每个模式类中的样本数和样本 */
		for (int i = 0; i < k; i++)
		{
			cout << "第" << number << "次迭代计算后，模式类" << i + 1 << "中包括{ ";
			int temp = 0;
			for (int j = 0; j < m; j++)
			{
				if (X[j].kinds == (i + 1))
				{
					N[i]++;
					S[i][temp] = j;
					cout << "X" << S[i][temp] + 1 << " ";
					temp++;
				}
			}
			cout << "}\n";
		}

		/* 计算新的聚类中心 */
		Node* oldZ = new Node[k]; //保存本次计算前的聚类中心
		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				oldZ[i].element[j] = Z[i].element[j];
			}
		}
		//计算聚类中心
		for (int i = 0; i < k; i++)
		{
			Node result;
			for (int j = 0; j < N[i]; j++)
			{
				Add(result, X[S[i][j]], n);
			}
			for (int j = 0; j < n; j++)
			{
				Z[i].element[j] = ((result.element[j]) / N[i]);
			}
		}

		/* 判断是否符合迭代结束条件 */
		for (int i = 0; i < k; i++)
		{
			cout << "第" << number << "次迭代计算后聚类中心Z" << i + 1 << "=( ";
			for (int j = 0; j < n; j++)
			{
				cout << Z[i].element[j] << " ";
			}
			cout << ")\n";
		}
		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (Z[i].element[j] != oldZ[i].element[j])
					condition = 0;
			}
		}

		delete[] oldZ;

		if (condition == 1)
			break;
	}
}

int main()
{
	/* 数据的输入与初始化 */
	
	cout << "请输入需要分类的模式样本的维数：";
	//cin >> n;
	n = 4;
	cout << "请输入需要分类的模式样本的个数：";
	//cin >> m;
	m = 150;
	//cout << "请输入需要分类的模式样本：\n";
	/*for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cin >> X[i].element[j];
		}
	}*/
	fstream file;
	file.open("D:/test_code/Kmeans/test0.txt");
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			file >> X[i].element[j];
			cout << X[i].element[j] << " ";
		}
		cout << endl;
	}

	
	while (1)
	{
		cout << "请输入本次聚类分析需要将模式样本分成的类数（k值）：";
		cin >> k;
		if (k <= 1)
			cout << "k值需为大于等于1的整数";
		else
			break;
	}

	LARGE_INTEGER start, end, frequency;
	QueryPerformanceFrequency(&frequency);

	QueryPerformanceCounter(&start);
	/* 根据用户输入的k值初始化聚类中心 */
    Z = new Node[k]; //聚类中心
	for (int i = 0; i < k; i++)
	{
		for (int j = 0; j < n; j++)
		{
			Z[i].element[j] = X[i].element[j];
			cout << Z[i].element[0] << " ";
		}
	}

	/* 迭代计算聚类中心 */
	Kmeans();

	/* 输出计算结果 */
	cout << "经过计算\n";
	for (int i = 0; i < k; i++)
	{
		cout << "聚类中心Z" << i + 1 << "=( ";
		for (int j = 0; j < n; j++)
		{
			cout << Z[i].element[j] << " ";
		}
		cout << ")\n";
	}
	QueryPerformanceCounter(&end);
	double res = static_cast<double>
		(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	cout << endl << res;//秒为单位

	delete[] Z;
	return 0;
}