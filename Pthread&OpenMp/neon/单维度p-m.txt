/* K-均值算法 */
#include<iostream>
#include<math.h>
#include<stdlib.h>
#include<pthread.h>
#pragma comment(lib, "winmm.lib")

#include<sys/time.h>
#include<unistd.h>

using namespace std;
#define Number 10000 //模式样本的最大维数与个数
#define ThreadNum 4
struct Node //定义了一个用于存放模式样本的数据结构
{
	double element[Number] = { 0 };//模式样本
	int kinds = 0; //模式样本所属类别，0为未分类状态
} X[Number];

int n; //模式样本的维数
int m; //模式样本的个数
int k; //用于K-means算法的k值
Node* Z; //聚类中心

int number; //用于记录迭代计算轮数
double D[ThreadNum][Number]; //用于存放迭代计算中距离的变量
int* N; //用于统计每个模式类中的模式样本数
int(*S)[10000]; //用于统计每个模式类中的模式样本
int condition; //算法结束的条件
Node* oldZ;
typedef struct {
	int threadId;
	int n;
}threadParam_t;

double Distance(Node X, Node Z, int n) //欧式距离计算函数
{
	double result = 0;
	for (int i = 0; i < n; i++)
	{
		result = result + (X.element[i] - Z.element[i]) * (X.element[i] - Z.element[i]);
	}
	result = sqrt(result);
	return result;
}

void Add(Node& result, Node X, int n) //矩阵加法
{
	for (int i = 0; i < n; i++)
	{
		result.element[i] = result.element[i] + X.element[i];
	}
}

void* threadFunc(void* param) {
	threadParam_t* p = (threadParam_t*)param;
	int n = p->n;
	int Id = p->threadId;
	int my_n = n / ThreadNum;
	int my_first = my_n * Id;
	int my_last = my_first + my_n - 1;

	//cout << "ID:" << Id << " " << "my_n:" << my_n << "  my_first" << my_first << " my_last" << my_last << endl;

	for (int i = my_first; i <= my_last; i++)
	{
		for (int j = 0; j < k; j++)
		{
			int temp_x = X[i].element[0];
			int temp_z = Z[j].element[0];
			D[Id][j] = (temp_x - temp_z) * (temp_x - temp_z);
		}
		int temp = 0;
		for (int j = 0; j < k; j++)
		{
			if (D[Id][temp] > D[Id][j])
				temp = j;
			X[i].kinds = temp + 1;
		}
	}
	pthread_exit(NULL);
	return p;
}

void Kmeans() //K-means算法中迭代计算函数
{
	//D = new double[k]; //用于存放迭代计算中距离的变量
	N = new int[k](); //用于统计每个模式类中的模式样本数
	S = new int[k][10000]; //用于统计每个模式类中的模式样本
	number = 0;
	condition = 1;
	oldZ = new Node[k]; //保存本次计算前的聚类中心

	while (1) //迭代运算
	{
		number++;
		if (number == 300)
			break;
		condition = 1;
		for (int i = 0; i < k; i++) //对Ni进行初始化
		{
			N[i] = 0;
		}
		/* 分别计算各点与聚类中心的距离 */
		/*for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < k; j++)
			{
				int temp_x = X[i].element[0];
				int temp_z = Z[j].element[0];
				D[j] = (temp_x - temp_z) * (temp_x - temp_z);
			}
			int temp = 0;
			for (int j = 0; j < k; j++)
			{
				if (D[temp] > D[j])
					temp = j;
				X[i].kinds = temp + 1;
			}
		}*/

		//创建句柄
		pthread_t handles[ThreadNum];
		//创建线程结构
		threadParam_t param[ThreadNum];
		//分配任务
		for (int i = 0;i < ThreadNum;i++) {
			param[i].threadId = i;
			param[i].n = m;
		}
		//创建线程
		for (int i = 0;i < ThreadNum;i++)
			pthread_create(&handles[i], NULL, threadFunc, &param[i]);
		//清除
		for (int i = 0;i < ThreadNum;i++)
			pthread_join(handles[i], NULL);


		/* 统计每个模式类中的样本数和样本 */
		for (int i = 0; i < k; i++)
		{
			cout << "第" << number << "次迭代计算后，模式类" << i + 1 << "中包括{ ";
			int temp = 0;
			for (int j = 0; j < m; j++)
			{
				if (X[j].kinds == (i + 1))
				{
					N[i]++;
					S[i][temp] = j;
					cout << "X" << S[i][temp] + 1 << " ";
					temp++;
				}
			}
			cout << "}\n";
		}

		/* 计算新的聚类中心 */
		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				oldZ[i].element[j] = Z[i].element[j];
			}
		}
		//计算聚类中心
		for (int i = 0; i < k; i++)
		{
			Node result;
			for (int j = 0; j < N[i]; j++)
			{
				Add(result, X[S[i][j]], n);
			}
			for (int j = 0; j < n; j++)
			{
				Z[i].element[j] = ((result.element[j]) / N[i]);
			}
		}

		/* 判断是否符合迭代结束条件 */
		for (int i = 0; i < k; i++)
		{
			cout << "第" << number << "次迭代计算后聚类中心Z" << i + 1 << "=( ";
			for (int j = 0; j < n; j++)
			{
				cout << Z[i].element[j] << " ";
			}
			cout << ")\n";
		}

		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (Z[i].element[j] != oldZ[i].element[j])
					condition = 0;
			}
		}

		if (condition == 1)
			break;
	}
}

int main()
{
	/* 数据的输入与初始化 */
	cout << "请输入需要分类的模式样本的维数：";
	n=1;
	cout << "请输入需要分类的模式样本的个数：";
	m=400;
	cout << "请输入需要分类的模式样本：\n";
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			//cin >> X[i].element[j];
			X[i].element[j] = i;
		}
	}
 
 k=16;

	struct timeval t1, t2;
	double timeuse;
	gettimeofday(&t1, NULL);

	/* 根据用户输入的k值初始化聚类中心 */
	Z = new Node[k];
	for (int i = 0; i < k; i++)
	{
		for (int j = 0; j < n; j++)
		{
			Z[i].element[j] = X[i].element[j];
			cout << Z[i].element[0] << " ";
		}
	}

	/* 迭代计算聚类中心 */
	Kmeans();

	/* 输出计算结果 */
	cout << "经过计算\n";
	for (int i = 0; i < k; i++)
	{
		cout << "聚类中心Z" << i + 1 << "=( ";
		for (int j = 0; j < n; j++)
		{
			cout << Z[i].element[j] << " ";
		}
		cout << ")\n";
	}
	gettimeofday(&t2, NULL);
	double res = (t2.tv_sec - t1.tv_sec) + (double)(t2.tv_usec - t1.tv_usec) / 1000000.0;
	cout << endl << res;//秒为单位


	delete[] Z;
	return 0;
}