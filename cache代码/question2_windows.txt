#include <iostream>
#include<fstream>
#include<ostream>
#include<stdlib.h>
#include<stdio.h>
#include<windows.h>
#pragma comment(lib, "winmm.lib")
using namespace std;

int main()
{
    int n=100000;

    fstream file;
    file.open("D:/test_code/cache/x_100000.txt");

    int *a=new int[n];
    for(int i=0;i<n;i++)
        file>>a[i];
    file.close();

    int res=0;
    int res1=0;
    int res2=0;

    LARGE_INTEGER t1, t2, t3,t4,t5,t6,tc;
    QueryPerformanceFrequency(&tc);

    //平凡算法
    QueryPerformanceCounter(&t1);
    for(int i=0;i<n;i++)
        res+=a[i];
    QueryPerformanceCounter(&t2);
    double t11=(double)((t2.QuadPart - t1.QuadPart) * 1000000.0 / tc.QuadPart);




    //优化算法1--多链路式
    QueryPerformanceCounter(&t3);
    int sum1= 0,sum2 = 0;
    for (int i = 0;i < n; i += 2)
    {
        sum1 += a[i];
        sum2 += a[i + 1];
    }
    res1 = sum1 + sum2;

    QueryPerformanceCounter(&t4);
    double t22=(double)((t4.QuadPart - t3.QuadPart) * 1000000.0 / tc.QuadPart);


    //优化算法2--二重循环实现递归算法
    QueryPerformanceCounter(&t5);
    for (int m = n; m > 1; m /= 2)
        for (int i = 0; i < m / 2; i++)
            a[i] = a[i*2] + a[i*2 + 1];
    res2=a[0];
    QueryPerformanceCounter(&t6);
    double t33=(double)((t6.QuadPart - t4.QuadPart) * 1000000.0 / tc.QuadPart);


    cout<<"t1:"<<t11<<"ms"<<endl;
    cout<<"t2:"<<t22<<"ms"<<endl;
    cout<<"t3:"<<t33<<"ms"<<endl;


    return 0;
}
