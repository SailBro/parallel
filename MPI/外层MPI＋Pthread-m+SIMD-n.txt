#include<iostream>
#include<mpi.h>
#include<fstream>
#include<math.h>
#include<iomanip>
#include<pthread.h>
#include<windows.h>
#include <xmmintrin.h> //SSE
#include <emmintrin.h> //SSE2
#include <pmmintrin.h> //SSE3
#include <tmmintrin.h> //SSSE3
#include <smmintrin.h> //SSE4.1
#include <nmmintrin.h> //SSSE4.2
#include <immintrin.h> //AVX、AVX2
#pragma comment(lib, "winmm.lib")
using namespace std;
#define Number 20000 //模式样本的最大维数与个数

#define ThreadNum 4
typedef struct {
	int threadId;
	int n;
}threadParam_t;
struct Node //定义了一个用于存放模式样本的数据结构
{
	float element[Number] = { 0 };//模式样本
	int kinds = 0; //模式样本所属类别，0为未分类状态
} X[Number];

int n; //模式样本的维数
int m; //模式样本的个数
int k; //用于K-means算法的k值
Node* Z;
int number; //用于记录迭代计算轮数
//float* D; //用于存放迭代计算中距离的变量
float D[ThreadNum][Number]; //用于存放迭代计算中距离的变量
int* N; //用于统计每个模式类中的模式样本数
int(*S)[10000]; //用于统计每个模式类中的模式样本
int condition; //算法结束的条件
int Ktally;//迭代此处

float Distance(Node X, Node Z, int n) //欧式距离计算函数
{
	float result = 0;
	for (int i = 0; i < n; i++)
	{
		result = result + (X.element[i] - Z.element[i]) * (X.element[i] - Z.element[i]);
	}
	result = sqrt(result);
	return result;
}

void Add(Node& result, Node X, int n) //矩阵加法
{
	for (int i = 0; i < n; i++)
	{
		result.element[i] = result.element[i] + X.element[i];
	}
}

void* threadFunc(void* param) {
	threadParam_t* p = (threadParam_t*)param;
	int N = p->n;
	int Id = p->threadId;
	int my_n = N / ThreadNum;
	int my_first = my_n * Id;
	int my_last = my_first + my_n - 1;

	//cout << "my_fi" << my_first << " myla" << my_last << endl;

	for (int i = my_first; i <= my_last; i++)
	{
		__m128 temp_x, temp_z;
		temp_x = _mm_set1_ps(2); //x中4个单精度浮点数设为2
		temp_z = _mm_set1_ps(2); //z中4个单精度浮点数设为2
		float x[4];
		float z[4];

		//计算该点到k个聚类中心的距离
		for (int j = 0; j < k; j++)
		{
			D[Id][j] = 0;//到该聚类中心的距离初始化为0
			for (int s = 0; s < n; s += 4) {

				//当前选取的四个维度
				for (int r = 0; r < 4; r++)
					x[r] = X[i].element[s + r];

				for (int r = 0; r < 4; r++)
					z[r] = Z[j].element[s + r];

				//读取连续的4个单精度浮点数
				temp_x = _mm_loadu_ps(x);
				temp_z = _mm_loadu_ps(z);
				//向量作减法
				__m128 diff = _mm_sub_ps(temp_x, temp_z);
				//得平方差（距离）
				__m128 dis = _mm_mul_ps(diff, diff);

				//平方差的和
				// 对dis中的相邻元素进行加法运算，并将结果存储到res2中
				__m128 res2 = _mm_hadd_ps(dis, dis);
				// 对res2中的相邻元素进行加法运算，并将结果存储到xmm2中
				__m128 res4 = _mm_hadd_ps(res2, res2);
				// 将res4中的第一个元素（即所有元素的和）存储到一个float型变量sum中
				D[Id][j] += _mm_cvtss_f32(res4);
			}
		}
		//选距离最小作为聚类中心
		int temp = 0;
		for (int j = 0; j < k; j++)
		{
			if (D[Id][temp] > D[Id][j])
				temp = j;
			X[i].kinds = temp + 1;
		}
	}

	pthread_exit(NULL);
	return p;
}

void Kmeans(int myid) //K-means算法中迭代计算函数
{
	number = 0; //用于记录迭代计算轮数
	//D = new float[k]; //用于存放迭代计算中距离的变量
	N = new int[k](); //用于统计每个模式类中的模式样本数
	S = new int[k][10000]; //用于统计每个模式类中的模式样本
	condition = 1; //算法结束的条件

	while (1) //迭代运算
	{
		if (number >= 300)
			break;
		number++;
		//cout << number;
		printf("进程%d第%d次迭代", myid, number);
		cout << endl;
		condition = 1;
		for (int i = 0; i < k; i++) //对Ni进行初始化
		{
			N[i] = 0;
		}

		/* 分别计算各点与聚类中心的距离 */

		//创建句柄
		pthread_t handles[ThreadNum];
		//创建线程结构
		threadParam_t param[ThreadNum];
		//分配任务
		for (int i = 0;i < ThreadNum;i++) {
			param[i].threadId = i;
			param[i].n = m;
		}
		//创建线程
		for (int i = 0;i < ThreadNum;i++)
			pthread_create(&handles[i], NULL, threadFunc, &param[i]);
		//清空
		for (int i = 0;i < ThreadNum;i++)
			pthread_join(handles[i], NULL);


		/* 统计每个模式类中的样本数和样本 */
		for (int i = 0; i < k; i++)
		{
			//cout << "第" << number << "次迭代计算后，模式类" << i + 1 << "中包括{ ";
			int temp = 0;
			for (int j = 0; j < m; j++)
			{
				if (X[j].kinds == (i + 1))
				{
					N[i]++;
					S[i][temp] = j;
					//cout << "X" << S[i][temp] + 1 << " ";
					temp++;
				}
			}
			//cout << "}\n";
		}

		/* 计算新的聚类中心 */
		Node* oldZ = new Node[k]; //保存本次计算前的聚类中心
		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				oldZ[i].element[j] = Z[i].element[j];
			}
		}
		//计算聚类中心
		for (int i = 0; i < k; i++)
		{
			Node result;
			for (int j = 0; j < N[i]; j++)
			{
				Add(result, X[S[i][j]], n);
			}
			for (int j = 0; j < n; j++)
			{
				Z[i].element[j] = ((result.element[j]) / N[i]);
			}
		}

		/* 判断是否符合迭代结束条件 */
		/*for (int i = 0; i < k; i++)
		{
			cout << "第" << number << "次迭代计算后聚类中心Z" << i + 1 << "=( ";
			for (int j = 0; j < n; j++)
			{
				cout << Z[i].element[j] << " ";
			}
			cout << ")\n";
		}*/

		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (Z[i].element[j] != oldZ[i].element[j])
					condition = 0;
			}
		}

		delete[] oldZ;

		if (condition == 1) {
			Ktally = number;
			break;
		}
	}
}
void testMPI(int argc, char* argv[]) {
	int myid, numprocs, namelen;
	char processor_name[MPI_MAX_PROCESSOR_NAME];

	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &myid);
	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
	MPI_Get_processor_name(processor_name, &namelen);

	printf("%s: Hello world from process %d \n", processor_name, myid);
	int sumOfRank = 0;
	MPI_Reduce(&myid, &sumOfRank, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
	if (myid == 0) {
		printf("sum:%d", sumOfRank);
	}

	MPI_Finalize();
}
int main(int argc, char* argv[]) {
	//testMPI(argc, argv);
	/* 数据的输入与初始化 */

	n = 4;
	m = 1600;
	k = 4;
	fstream file;
	file.open("D:/test_code/Kmeans/data1.txt");
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			file >> X[i].element[j];
			//cout << X[i].element[j] << " ";
		}
		//cout << endl;
	}

	/*while (1)
	{
		cout << "请输入本次聚类分析需要将模式样本分成的类数（k值）：";
		cin >> k;
		if (k <= 1)
			cout << "k值需为大于等于1的整数";
		else
			break;
	}*/


	//进程创建
	int myid, numprocs;
	double sum_time = 0, local_time = 0;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &myid);
	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
	printf("进程%d读取数据完毕", myid);
	cout << endl;

	LARGE_INTEGER start, end, frequency;
	QueryPerformanceFrequency(&frequency);

	QueryPerformanceCounter(&start);

	//for (int xx = 0;xx < 4;xx++) {

		/* 根据用户输入的k值初始化聚类中心 */
	Z = new Node[k]; //聚类中心
	for (int i = 0; i < k; i++)
	{
		for (int j = 0; j < n; j++)
		{
			Z[i].element[j] = X[i].element[j];
			//cout << Z[i].element[0] << " ";
		}
	}

	/* 迭代计算聚类中心 */
	Kmeans(myid);

	/* 输出计算结果 */
	cout << "经过计算\n";
	for (int i = 0; i < k; i++)
	{
		cout << "聚类中心Z" << i + 1 << "=( ";
		for (int j = 0; j < n; j++)
		{
			cout << Z[i].element[j] << " ";
		}
		cout << ")\n";
	}
	
	QueryPerformanceCounter(&end);
	local_time = static_cast<double>
		(end.QuadPart - start.QuadPart) / frequency.QuadPart;

	MPI_Barrier(MPI_COMM_WORLD);//进程同步
	//cout << "进程" << myid << ":" << res / 4 << endl;//秒为单位
	if (myid == 0) { 
		printf("(n=%d,m=%d,k=%d)", n, m, k);
		cout << endl;
	}
	printf("进程%d共迭代%d次，用时%.2fs", myid, Ktally, local_time);
	cout << endl;
	//规约操作，对4进程时间求和
	MPI_Reduce(&local_time, &sum_time, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
	if (myid == 0)
		printf("4个进程总用时%.2fs，平均每个进程用时%.2fs", sum_time, sum_time / 4);
	delete[] Z;

	MPI_Finalize();
	return 0;
}