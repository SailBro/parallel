#include<iostream>
#include<opencv2/imgcodecs.hpp>
#include<opencv2/highgui.hpp>
#include<opencv2/imgproc.hpp>
#include<fstream>
#include<ostream>
#include<math.h>
#include<iomanip>
#include<string.h>
#include <xmmintrin.h> //SSE
#include <emmintrin.h> //SSE2
#include <pmmintrin.h> //SSE3
#include <tmmintrin.h> //SSSE3
#include <smmintrin.h> //SSE4.1
#include <nmmintrin.h> //SSSE4.2
#include <immintrin.h> //AVX、AVX2
#include <pthread.h>
#include<mpi.h>

#include<windows.h>
#pragma comment(lib, "winmm.lib")

using namespace std;
using namespace cv;

#define Number 20000 //模式样本的最大维数与个数
#define LIMIT 100

struct NodeData //定义了一个用于存放模式样本的数据结构
{
	float element[Number] = { 0 };//模式样本
	int kinds = 0; //模式样本所属类别，0为未分类状态
} X[Number];

int n; //模式样本的维数
int m; //模式样本的个数
int k; //用于K-means算法的k值
NodeData* Z;
int number; //用于记录迭代计算轮数
float* D; //用于存放迭代计算中距离的变量
int* N; //用于统计每个模式类中的模式样本数
int(*S)[10000]; //用于统计每个模式类中的模式样本
int condition; //算法结束的条件
int Ktally;//迭代此处
int localnum;//各进程计算量

float Distance(NodeData X, NodeData Z, int n) //欧式距离计算函数
{
	float result = 0;
	for (int i = 0; i < n; i++)
	{
		result = result + (X.element[i] - Z.element[i]) * (X.element[i] - Z.element[i]);
	}
	result = sqrt(result);
	return result;
}

void Add(NodeData& result, NodeData X, int n) //矩阵加法
{
	for (int i = 0; i < n; i++)
	{
		result.element[i] = result.element[i] + X.element[i];
	}
}

void Kmeans(int myid) //K-means算法中迭代计算函数
{
	number = 0; //用于记录迭代计算轮数
	D = new float[k]; //用于存放迭代计算中距离的变量
	N = new int[k](); //用于统计每个模式类中的模式样本数
	S = new int[k][10000]; //用于统计每个模式类中的模式样本
	condition = 1; //算法结束的条件

	while (1) //迭代运算
	{
		if (number >= 300)
			break;
		number++;
		//cout << number;
		printf("进程%d第%d次迭代", myid, number);
		cout << endl;
		condition = 1;
		for (int i = 0; i < k; i++) //对Ni进行初始化
		{
			N[i] = 0;
		}
		/* 分别计算各点与聚类中心的距离 */
		//对for循环进行向量化组合计算的优化处理

		// 声明一个包含4个单精度浮点数的向量变量，用0初始化
		for (int i = 0; i < m; i++)
		{
			//计算该点到k个聚类中心的距离
			for (int j = 0; j < k; j++)
			{
				D[j] = 0;//到该聚类中心的距离初始化为0
				for (int s = 0; s < n; s++) {
					//计算当前维度的距离
					float x = X[i].element[s];
					float z = Z[j].element[s];
					float res = (x - z) * (x - z);
					D[j] += res;
				}
			}
			//选距离最小作为聚类中心
			int temp = 0;
			for (int j = 0; j < k; j++)
			{
				if (D[temp] > D[j])
					temp = j;
				X[i].kinds = temp + 1;
			}
		}

		/* 统计每个模式类中的样本数和样本 */
		for (int i = 0; i < k; i++)
		{
			//cout << "第" << number << "次迭代计算后，模式类" << i + 1 << "中包括{ ";
			int temp = 0;
			for (int j = 0; j < m; j++)
			{
				if (X[j].kinds == (i + 1))
				{
					N[i]++;
					S[i][temp] = j;
					//cout << "X" << S[i][temp] + 1 << " ";
					temp++;
				}
			}
			//cout << "}\n";
		}

		/* 计算新的聚类中心 */
		Node* oldZ = new Node[k]; //保存本次计算前的聚类中心
		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				oldZ[i].element[j] = Z[i].element[j];
			}
		}
		//计算聚类中心
		for (int i = 0; i < k; i++)
		{
			Node result;
			for (int j = 0; j < N[i]; j++)
			{
				Add(result, X[S[i][j]], n);
			}
			for (int j = 0; j < n; j++)
			{
				Z[i].element[j] = ((result.element[j]) / N[i]);
			}
		}

		/* 判断是否符合迭代结束条件 */
		/*for (int i = 0; i < k; i++)
		{
			cout << "第" << number << "次迭代计算后聚类中心Z" << i + 1 << "=( ";
			for (int j = 0; j < n; j++)
			{
				cout << Z[i].element[j] << " ";
			}
			cout << ")\n";
		}*/

		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (Z[i].element[j] != oldZ[i].element[j])
					condition = 0;
			}
		}

		delete[] oldZ;

		if (condition == 1) {
			Ktally = number;
			break;
		}
	}
}



int main()
{
	/* 数据的输入与初始化 */
	n =5;
	m = 0;
	//m=48*32;
	k = 4;
	
	string path = "D:\\test_code\\BSR\\BSDS500\\data\\images\\train\\108073.jpg";//图片的路径名
	Mat img = imread(path);//将图片加载后赋值到图像变量img中
	//if (path.empty()) { cout << "file not loaded" << endl; }
	//检查文件是否打开 没打开时执行打印语句
	//namedWindow("Image", WINDOW_FREERATIO);//创建一个名为Image的可调节的窗口

	//imshow("Image", img);//创建一个窗口来显示图像img
	//waitKey(0);//不断刷新图像

	cout << "列：" << img.cols << endl;
	cout << "行：" << img.rows << endl;
	cout << "通道数：" << img.channels() << endl;

	cv::namedWindow("Image0", cv::WINDOW_NORMAL);

	// 在窗口中显示图像
	cv::imshow("Image0", img);

	// 等待按键
	cv::waitKey(0);
	

	
	//传入像素矩阵数据
	int final_row = 0;
	int final_col = 0;
	for (int row = 0; row < img.rows-4; row+=4) {
		final_row++;
		int temp_col = 0;
		for (int col = 0; col < img.cols-4; col+=4) {
			if(row==0)
				temp_col++;
			// 使用 Vec3b 类型访问三个通道的像素值
			//cout << m<<"("<<row<<","<<col<<")"<<endl;
			cv::Vec3b pixel = img.at<cv::Vec3b>(row, col);
			X[m].element[0] = row;
			X[m].element[1] = col;
			//std::cout << "Pixel at (" << row << ", " << col << "): ";
			//std::cout << "B=" << static_cast<int>(pixel[0]) << " ";
			//std::cout << "G=" << static_cast<int>(pixel[1]) << " ";
			//std::cout << "R=" << static_cast<int>(pixel[2]) << std::endl;
			for (int i = 0;i < 3;i++)
				X[m].element[2 + i] = static_cast<int>(pixel[i]);
			m++;
		}
		if (row == 0)
			final_col = temp_col;
	}

	//输出分辨率降低后的图像
	// 创建一个与data矩阵大小相同的Mat对象，并将data矩阵的数据逐个像素赋值给Mat对象

	cout << final_row << " " << final_col << endl;
	cv::Mat image(final_row, final_col, CV_8UC3);

	int index = 0;//当前像素在数组中的索引
	for (int row = 0; row < final_row; ++row) {
		for (int col = 0; col < final_col; ++col) {
			//修改坐标
			X[index].element[0] = row;
			X[index].element[1] = col;
			// 逐个通道数据赋值给Mat对象
			image.at<cv::Vec3b>(row, col) = cv::Vec3b(
				X[index].element[2], X[index].element[3], X[index].element[4]);
			index++;
		}
	}
	cv::namedWindow("Image1", cv::WINDOW_NORMAL);

	// 在窗口中显示图像
	cv::imshow("Image1", image);

	// 等待按键
	cv::waitKey(0);

	//namedWindow("Image", WINDOW_FREERATIO);//创建一个名为Image的可调节的窗口

	//imshow("Image", image);//创建一个窗口来显示图像img
	//waitKey(0);//不断刷新图像

	

	//进程创建
	int myid, numprocs;
	double sum_time = 0, local_time = 0;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &myid);
	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
	printf("进程%d读取数据完毕", myid);
	cout << endl;

	LARGE_INTEGER start, end, frequency;
	QueryPerformanceFrequency(&frequency);

	QueryPerformanceCounter(&start);

	//for (int xx = 0;xx < 4;xx++) {

		/* 根据用户输入的k值初始化聚类中心 */
	Z = new Node[k]; //聚类中心
	for (int i = 0; i < k; i++)
	{
		for (int j = 0; j < n; j++)
		{
			Z[i].element[j] = X[i].element[j];
			//cout << Z[i].element[0] << " ";
		}
	}

	/* 迭代计算聚类中心 */
	Kmeans(myid);

	/* 输出计算结果 */
	/*cout << "经过计算\n";
	for (int i = 0; i < k; i++)
	{
		cout << "聚类中心Z" << i + 1 << "=( ";
		for (int j = 0; j < n; j++)
		{
			cout << Z[i].element[j] << " ";
		}
		cout << ")\n";
	}*/
	//}
	QueryPerformanceCounter(&end);
	local_time = static_cast<double>
		(end.QuadPart - start.QuadPart) / frequency.QuadPart;

	MPI_Barrier(MPI_COMM_WORLD);//进程同步
	//cout << "进程" << myid << ":" << res / 4 << endl;//秒为单位
	if (myid == 0) {
		printf("(n=%d,m=%d,k=%d)", n, m, k);
		cout << endl;
	}
	printf("进程%d共迭代%d次，用时%.2fs", myid, Ktally, local_time);
	cout << endl;
	//规约操作，对4进程时间求和
	MPI_Reduce(&local_time, &sum_time, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
	if (myid == 0)
		printf("4个进程总用时%.2fs，平均每个进程用时%.2fs", sum_time, sum_time / 4);
	delete[] Z;


	//展示结果
	//k个
	// 创建一个存储Mat对象的向量
	std::vector<cv::Mat> ResImg;
	for (int i = 0; i < k; i++) {
		// 创建一个与指定行数、列数的三通道图像
		//各通道初始都为0
		cv::Mat tempImg(final_row, final_col, CV_8UC3, cv::Scalar(0, 0, 0));
		// 将image对象添加到向量中
		ResImg.push_back(tempImg);
	}
	//将k个聚类结果载入
	//遍历m个样本给像素点赋值
	for (int i = 0;i < m;i++) {
		int res = X[i].kinds-1;//0开始
		int posX = X[i].element[0];
		int posY = X[i].element[1];
		ResImg[res].at<cv::Vec3b>(posX, posY) = cv::Vec3b(
			X[i].element[2], X[i].element[3], X[i].element[4]);
	}
	string* flag = new string[k];
	flag[0] = "0";
	flag[1] = "1";
	if (k > 2) {
		flag[2] = "2";
		flag[3] = "3";
		//flag[4] = "4";
	}
		
	for (int i = 0;i < k;i++) {
		cv::namedWindow(flag[i], cv::WINDOW_NORMAL);
		// 在窗口中显示图像
		cv::imshow(flag[i], ResImg[i]);
		// 等待按键
		cv::waitKey(0);
	}

	MPI_Finalize();

	return 0;
}
