#include<iostream>
#include<opencv2/imgcodecs.hpp>
#include<opencv2/highgui.hpp>
#include<opencv2/imgproc.hpp>
#include<fstream>
#include<ostream>
#include<math.h>
#include<iomanip>
#include<string.h>
#include <xmmintrin.h> //SSE
#include <emmintrin.h> //SSE2
#include <pmmintrin.h> //SSE3
#include <tmmintrin.h> //SSSE3
#include <smmintrin.h> //SSE4.1
#include <nmmintrin.h> //SSSE4.2
#include <immintrin.h> //AVX、AVX2

#include<windows.h>
#pragma comment(lib, "winmm.lib")

using namespace std;
using namespace cv;

#define Number 20000 //模式样本的最大维数与个数
#define LIMIT 100
struct NodeData //定义了一个用于存放模式样本的数据结构
{
	float element[Number] = { 0 };//模式样本
	int kinds = 0; //模式样本所属类别，0为未分类状态
} X[Number];

int n; //模式样本的维数
int m; //模式样本的个数
int k; //用于K-means算法的k值
NodeData* Z;
int number; //用于记录迭代计算轮数
float* D; //用于存放迭代计算中距离的变量
int* N; //用于统计每个模式类中的模式样本数
int(*S)[10000]; //用于统计每个模式类中的模式样本
int condition; //算法结束的条件


float Distance(NodeData X, NodeData Z, int n) //欧式距离计算函数
{
	float result = 0;
	for (int i = 0; i < n; i++)
	{
		result = result + (X.element[i] - Z.element[i]) * (X.element[i] - Z.element[i]);
	}
	result = sqrt(result);
	return result;
}

void Add(NodeData& result, NodeData X, int n) //矩阵加法
{
	for (int i = 0; i < n; i++)
	{
		result.element[i] = result.element[i] + X.element[i];
	}
}

void Kmeans(int k, Node X[], Node Z[], int m, int n) //K-means算法中迭代计算函数
{
	int number = 0; //用于记录迭代计算轮数
	float D[100][100]; //用于存放迭代计算中距离的变量
	int* N = new int[k](); //用于统计每个模式类中的模式样本数
	int(*S)[100] = new int[k][100]; //用于统计每个模式类中的模式样本
	int condition = 1; //算法结束的条件



	float* z = new float[16];//设维度为1，记录Z的element[0]
	float* x = new float[16];


	while (1) //迭代运算
	{
		number++;
		condition = 1;
		for (int i = 0; i < k; i++) //对Ni进行初始化
		{
			N[i] = 0;
		}
		/* 分别计算各点与聚类中心的距离 */
		//对for循环进行向量化组合计算的优化处理

		// 声明一个包含4个单精度浮点数的向量变量，用0初始化
		__m512 temp_x, temp_z;
		temp_x = _mm512_set1_ps(2); //x中4个单精度浮点数设为2
		temp_z = _mm512_set1_ps(2); //z中4个单精度浮点数设为2
		for (int i = 0; i < m; i += 4)
		{
			//4点作为一个数组->依次重复四次->16元素的向量
			for (int r = 0; r < 4; r++)
				x[r * 4] = x[r * 4 + 1] = x[r * 4 + 2] = x[r * 4 + 3] = X[i + r].element[0];

			cout << "x:";
			for (int r = 0; r < 16; r++)
				cout << x[r] << " ";
			cout << endl;

			//读取x中连续的16个单精度浮点数
			temp_x = _mm512_loadu_ps(x);

			cout << "temp_x:";
			float* p = (float*)&temp_x;
			for (int r = 0; r < 16; r++)
				cout << p[r] << " ";
			cout << endl;

			//计算每组4个点到k个聚类中心的距离
			for (int j = 0; j < k; j += 4)
			{
				for (int r = 0; r < 4; r++) {
					z[r * 4] = Z[j].element[0];
					z[r * 4 + 1] = Z[j + 1].element[0];
					z[r * 4 + 2] = Z[j + 2].element[0];
					z[r * 4 + 3] = Z[j + 3].element[0];
				}
				cout << "z:";
				for (int r = 0; r < 16; r++)
					cout << z[r] << " ";
				cout << endl;


				temp_z = _mm512_loadu_ps(z);
				//计算距离（16--16--16）
				//向量作减法
				__m512 diff = _mm512_sub_ps(temp_x, temp_z);
				//得平方差（距离）
				__m512 dis = _mm512_mul_ps(diff, diff);

				//向量赋值
				float* tempArray = new float[16];
				_mm512_storeu_ps(tempArray, dis);

				for (int r = 0; r < 16; r++)
					D[r / 4][r % 4] = tempArray[r];

				cout << "D:";
				for (int r = 0; r < 16; r++)
					cout << D[r / 4][r % 4] << " ";
				cout << endl;
			}

			//向量比较？修改内部变量？？
			// 
			//选距离最小作为聚类中心
			int temp = 0;
			for (int r = 0; r < 4; r++) {
				temp = 0;
				for (int j = 0; j < k; j++)
				{
					if (D[r][temp] > D[r][j])
						temp = j;
					X[i + r].kinds = temp + 1;
				}
			}
		}

		/* 统计每个模式类中的样本数和样本 */
		for (int i = 0; i < k; i++)
		{
			cout << "第" << number << "次迭代计算后，模式类" << i + 1 << "中包括{ ";
			int temp = 0;
			for (int j = 0; j < m; j++)
			{
				if (X[j].kinds == (i + 1))
				{
					N[i]++;
					S[i][temp] = j;
					cout << "X" << S[i][temp] + 1 << " ";
					temp++;
				}
			}
			cout << "}\n";
		}

		/* 计算新的聚类中心 */
		Node* oldZ = new Node[k]; //保存本次计算前的聚类中心
		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				oldZ[i].element[j] = Z[i].element[j];
			}
		}
		//计算聚类中心
		for (int i = 0; i < k; i++)
		{
			Node result;
			for (int j = 0; j < N[i]; j++)
			{
				Add(result, X[S[i][j]], n);
			}
			for (int j = 0; j < n; j++)
			{
				Z[i].element[j] = ((result.element[j]) / N[i]);
			}
		}

		/* 判断是否符合迭代结束条件 */
		for (int i = 0; i < k; i++)
		{
			cout << "第" << number << "次迭代计算后聚类中心Z" << i + 1 << "=( ";
			for (int j = 0; j < n; j++)
			{
				cout << Z[i].element[j] << " ";
			}
			cout << ")\n";
		}
		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (Z[i].element[j] != oldZ[i].element[j])
					condition = 0;
			}
		}

		delete[] oldZ;

		if (condition == 1)
			break;
	}
}



int main()
{
	/* 数据的输入与初始化 */
	n =5;
	m = 0;
	//m=48*32;
	k = 4;
	
	string path = "D:\\test_code\\BSR\\BSDS500\\data\\images\\train\\108073.jpg";//图片的路径名
	Mat img = imread(path);//将图片加载后赋值到图像变量img中
	//if (path.empty()) { cout << "file not loaded" << endl; }
	//检查文件是否打开 没打开时执行打印语句
	//namedWindow("Image", WINDOW_FREERATIO);//创建一个名为Image的可调节的窗口

	//imshow("Image", img);//创建一个窗口来显示图像img
	//waitKey(0);//不断刷新图像

	cout << "列：" << img.cols << endl;
	cout << "行：" << img.rows << endl;
	cout << "通道数：" << img.channels() << endl;

	cv::namedWindow("Image0", cv::WINDOW_NORMAL);

	// 在窗口中显示图像
	cv::imshow("Image0", img);

	// 等待按键
	cv::waitKey(0);
	

	
	//传入像素矩阵数据
	int final_row = 0;
	int final_col = 0;
	for (int row = 0; row < img.rows-4; row+=4) {
		final_row++;
		int temp_col = 0;
		for (int col = 0; col < img.cols-4; col+=4) {
			if(row==0)
				temp_col++;
			// 使用 Vec3b 类型访问三个通道的像素值
			//cout << m<<"("<<row<<","<<col<<")"<<endl;
			cv::Vec3b pixel = img.at<cv::Vec3b>(row, col);
			X[m].element[0] = row;
			X[m].element[1] = col;
			//std::cout << "Pixel at (" << row << ", " << col << "): ";
			//std::cout << "B=" << static_cast<int>(pixel[0]) << " ";
			//std::cout << "G=" << static_cast<int>(pixel[1]) << " ";
			//std::cout << "R=" << static_cast<int>(pixel[2]) << std::endl;
			for (int i = 0;i < 3;i++)
				X[m].element[2 + i] = static_cast<int>(pixel[i]);
			m++;
		}
		if (row == 0)
			final_col = temp_col;
	}

	//输出分辨率降低后的图像
	// 创建一个与data矩阵大小相同的Mat对象，并将data矩阵的数据逐个像素赋值给Mat对象

	cout << final_row << " " << final_col << endl;
	cv::Mat image(final_row, final_col, CV_8UC3);

	int index = 0;//当前像素在数组中的索引
	for (int row = 0; row < final_row; ++row) {
		for (int col = 0; col < final_col; ++col) {
			//修改坐标
			X[index].element[0] = row;
			X[index].element[1] = col;
			// 逐个通道数据赋值给Mat对象
			image.at<cv::Vec3b>(row, col) = cv::Vec3b(
				X[index].element[2], X[index].element[3], X[index].element[4]);
			index++;
		}
	}
	cv::namedWindow("Image1", cv::WINDOW_NORMAL);

	// 在窗口中显示图像
	cv::imshow("Image1", image);

	// 等待按键
	cv::waitKey(0);

	//namedWindow("Image", WINDOW_FREERATIO);//创建一个名为Image的可调节的窗口

	//imshow("Image", image);//创建一个窗口来显示图像img
	//waitKey(0);//不断刷新图像

	

	//聚类过程
	LARGE_INTEGER start, end, frequency;
	QueryPerformanceFrequency(&frequency);

	QueryPerformanceCounter(&start);

	for (int xx = 0;xx < 4;xx++) {

		/* 根据用户输入的k值初始化聚类中心 */
		Z = new NodeData[k]; //聚类中心
		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < n; j++)
			{
				Z[i].element[j] = X[i].element[j];
				cout << Z[i].element[0] << " ";
			}
		}

		/* 迭代计算聚类中心 */
		Kmeans();

		/* 输出计算结果 */
		cout << "经过计算\n";
		for (int i = 0; i < k; i++)
		{
			cout << "聚类中心Z" << i + 1 << "=( ";
			for (int j = 0; j < n; j++)
			{
				cout << Z[i].element[j] << " ";
			}
			cout << ")\n";
		}
	}
	QueryPerformanceCounter(&end);
	double res = static_cast<double>
		(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	cout << endl << res / 4;//秒为单位

	delete[] Z;

	//展示结果
	//k个
	// 创建一个存储Mat对象的向量
	std::vector<cv::Mat> ResImg;
	for (int i = 0; i < k; i++) {
		// 创建一个与指定行数、列数的三通道图像
		//各通道初始都为0
		cv::Mat tempImg(final_row, final_col, CV_8UC3, cv::Scalar(0, 0, 0));
		// 将image对象添加到向量中
		ResImg.push_back(tempImg);
	}
	//将k个聚类结果载入
	//遍历m个样本给像素点赋值
	for (int i = 0;i < m;i++) {
		int res = X[i].kinds-1;//0开始
		int posX = X[i].element[0];
		int posY = X[i].element[1];
		ResImg[res].at<cv::Vec3b>(posX, posY) = cv::Vec3b(
			X[i].element[2], X[i].element[3], X[i].element[4]);
	}
	string* flag = new string[k];
	flag[0] = "0";
	flag[1] = "1";
	if (k > 2) {
		flag[2] = "2";
		flag[3] = "3";
		//flag[4] = "4";
	}
		
	for (int i = 0;i < k;i++) {
		cv::namedWindow(flag[i], cv::WINDOW_NORMAL);
		// 在窗口中显示图像
		cv::imshow(flag[i], ResImg[i]);
		// 等待按键
		cv::waitKey(0);
	}



	return 0;
}
